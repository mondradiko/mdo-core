name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash
jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
            cc: cl.exe
            cxx: cl.exe
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - uses: actions/checkout@v2
        with:
          repository: 'KhronosGroup/OpenXR-SDK'
          path: 'OpenXR-SDK'

      - name: setup VsDev environment
        if: runner.os == 'Windows'
        uses: mondradiko/gha-setup-vsdevenv@v3

      - uses: mondradiko/gha-setup-ninja@v3
      - name: Build OpenXR SDK
        working-directory: 'OpenXR-SDK'
        run: |
          mkdir build
          pushd build
          cmake -GNinja ..
          cmake --build .

      - name: Install OpenXR SDK (Linux)
        if: runner.os == 'Linux'
        working-directory: 'OpenXR-SDK/build'
        run: sudo cmake --install .

      - name: Install OpenXR SDK (Windows)
        if: runner.os == 'Windows'
        working-directory: 'OpenXR-SDK/build'
        run: cmake --install .

      - name: Checkout SDL2 (Windows only)
        uses: actions/checkout@v2
        if: runner.os == 'Windows'
        with:
          repository: 'libsdl-org/SDL'
          ref: 'release-2.0.10'
          path: 'SDL2'

      - name: Build and Install SDL2 (Windows only)
        if: runner.os == 'Windows'
        working-directory: 'SDL2'
        run: |
          mkdir build
          pushd build
          cmake -GNinja ..
          cmake --build .
          cmake --install .

      - name: Checkout libuv (Windows only)
        uses: actions/checkout@v2
        if: runner.os == 'Windows'
        with:
          repository: 'libuv/libuv'
          path: 'libuv'

      - name: Build and Install libuv (Windows only)
        if: runner.os == 'Windows'
        working-directory: 'libuv'
        run: |
          mkdir build
          pushd build
          cmake -GNinja ..
          cmake --build .
          cmake --install .

      - name: apt
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install libuv1-dev libvulkan-dev libsdl2-dev

      - uses: mondradiko/gha-setup-ninja@v3
      - name: Configure
        run: |
          mkdir build
          pushd build
          cmake -GNinja -DTRACY_ENABLE=ON -DCOMPILE_SHADERS=OFF ..

      - name: compile
        run: ninja -C build
